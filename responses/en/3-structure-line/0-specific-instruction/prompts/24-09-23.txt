Given the functions:
{
    "functions": [
        {
            "name": "PackagingLine",
            "description": "This constructor creates a new instance of a packaging line with a given amount of sub-machines.",
            "arguments": [
                {
                    "name": "n",
                    "description": "Amount of sub-machines to add to the packaging line.",
                    "type": "number"
                }
            ],
            "returns": {
                "description": "Instance of the packaging line.",
                "type": "PackagingLine"
            }
        },
        {
            "name": "add_conveyor_belt",
            "description": "This method of the PackagingLine type adds a conveyor belt to the packaging line. The conveyor belt runs through the machines, giving all machines access to the contents of the conveyor belt. Sub-machines are zero-index from left to right.",
            "arguments": [
                {
                    "name": "beginning",
                    "description": "Index of the first sub-machine to connect the conveyor belt to.",
                    "type": "number"
                },
                {
                    "name": "end",
                    "description": "Index of the last sub-machine to connect the conveyor belt to.",
                    "type": "number"
                },
                {
                    "name": "belt_type",
                    "description": "Type of the conveyor belt to add. Currently the types 'item' and 'tray' are supported.",
                    "type": "string"
                }
            ],
            "returns": {
                "description": "The amount of machines that had the conveyor belt connected to them.",
                "type": "number"
            }
        },
        {
            "name": "add_packaging_robot",
            "description": "This method of the SubMachine type adds a packaging robot to the sub-machine.",
            "arguments": [
                {
                    "name": "machine_type",
                    "description": "Type of the packaging machine to add. Currently the types 'picker' and 'scanner' are supported.",
                    "type": "string"
                }
            ],
            "returns": "void"
        },
        {
            "name": "attach_funnel",
            "description": "This method of the SubMachine type attaches a funnel to the sub-machine. The method checks if a funnel is already attached to the sub-machine. If a funnel is already attached, the mothod returns false, otherwise true.",
            "returns": "bool"
        }
    ]
}

and the types:
{
    "types": {
        "PackagingLine": {
            "description": "A class that represents a packaging line.",
            "properties": {
                "submachines": {
                    "description": "Array of packaging machines in the packaging line.",
                    "type": "Array<SubMachines>"
                },
                "conveyor_belts": {
                    "description": "Array of conveyor belts in the packaging line.",
                    "type": "Array<ConveyorBelt>"
                }
            }
        },
        "SubMachine": {
            "description": "A class that represents a sub-machine in a packaging line.",
            "properties": {
                "packaging_robots": {
                    "description": "Array of packaging machines in the sub-machine.",
                    "type": "Array<PackagingRobot>"
                },
                "funnel": {
                    "description": "Boolean value that indicates if a funnel is attached to the sub-machine. Funnels are the only way to insert items into the packaging line.",
                    "type": "bool"
                }
            }
        },
        "PackagingRobot": {
            "description": "A class that represents a packaging robot in a sub-machine.",
            "properties": {
                "machine_type": {
                    "description": "Type of the packaging machine.",
                    "type": "string"
                }
            }
        },
        "ConveyorBelt": {
            "description": "A class that represents a conveyor belt in a packaging line. A conveyor belt can either carry items or trays. If a conveyor belt carrys trays they don't have to be placed or picked up by a picker.",
            "properties": {
                "beginning": {
                    "description": "Index of the first sub-machine the conveyor belt is connected to.",
                    "type": "number"
                },
                "end": {
                    "description": "Index of the last sub-machine the conveyor belt is connected to.",
                    "type": "number"
                },
                "belt_type": {
                    "description": "Type of the conveyor belt. Currently the types 'item' and 'tray' are supported.",
                    "type": "string"
                }
            }
        }
    }
}

and the facts:
- The goal of the packaging line is to place items on trays.
- A tray has a maximum capacity of 40 items.
- A packaging line consists of submachines.
- A submachine can contain different types of robots.
- A submachine can contain at most 4 robots.
- A submachine can contain conveyor belts.
- A submachine can contain at most 3 conveyor belts.
- Items are input into the packaging line using a funnel.
- Only one funnel can be attached to a submachine.
- A funnel supplies 100 items per unit of time.
- Items and trays are moved by conveyor belts.
- A conveyor belt can carry either items or trays.
- A conveyor belt for trays carrys 4 trays.
- Items are placed on trays by a robotic arm called the "picker".
- The picker can pick up at most 30 items at a time.
- The picker counts towards the robot limit in a submachine.
- For a picker to pick up an item, the items position must be known.
- To know the position of an item, the item must be scanned.
- The machine that can scan items is called the "scanner".
- The scanner can scan an arbitrary amount of items.
- The scanner can only scan items that arriving on a conveyor belt.
- The scanner can not scan items that are input in the same submachine as the scanner.
- Once an item has been scanned, it does not have to be scanned ever again.
- The scanner can scan all belts in a submachine.
- The scanner counts towards the robot limit in a submachine.
- For an item to be correctly placed on a tray, the submachine it is in must have an item belt, a tray belt and a picker with some picking capacity remaining.
- All components of a packaging line have a cost.
- The base cost of a packaging line is 1000.
- The cost of a submachine is 500.
- The base cost of a conveyor belt is 50.
- For every submachine the conveyor belt is spanning, the cost is increased by 5.
- The cost of a picker is 100.
- The cost of a scanner is 3000.
- The cost of a funnel is 25.

Write a python function that only uses the given API to return a packaging line with enough capacity to package 100 items. The packaging line should have the lowest possible cost.
Make sure to not implement any functions. Only use the given functions.

First we want to compute how many submachines the are needed to store all robots and belts required to meet the capacity requirement. 
Start by computing how many funnels are necessary to input all items into the machine. Do that by dividing the total amount of items by the a single funnels capacity and rounding up the result.
Next we compute how many scanners are needed. Do that by identifiying the capacity of a single scanner and then infere how many are need at least. Use the smallest amount of scanners.
Compute how many pickers are necessary to place all items in trays. Do that by dividing the total amount of items by the a single pickers capacity and rounding up the result. 
Add the two types of robots together and compute how many submachines are needed to house all robots.
Now we have to plan the structure of the packaging line. To do this correctly, we have to follow the constraints of the given API. Decide where we should place the funnels and robots in the packaging line so the items can be processed correctly. Determine if it is useful to have funnels and robots in the same submachine. Use these considerations to calculate the amount of submachines needed.
Create a packaging line object with the calculated amount of submachines. 
Then attach the required amount of funnels to the submachines where you previously planned them to go. And lastly add the required robots to the submachines again using the structure you previously planned.
The final step is to compute how many tray belts are necessary to have enough space available for all items. First, multiply the amount a single tray can hold with the amount of trays that one belt can carry and divide the result by the amount of items the machine should use. Round up the result and distribute the tray belts so that all items can be processed and as much picker capacity as possible is used.
The last step is to attach an item belt that connects all submachines, that require items to be transported through them.
